package com.android.download.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import com.android.download.db.DownloadEntity;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DownloadDb".
 */
public class DownloadEntityDao extends AbstractDao<DownloadEntity, Long> {

  public static final String TABLENAME = "DownloadDb";

  public DownloadEntityDao(DaoConfig config) {
    super(config);
  }

  public DownloadEntityDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /** Creates the underlying database table. */
  public static void createTable(Database db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"DownloadDb\" (" + //
        "\"_Id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _Id
        "\"startPosition\" INTEGER NOT NULL ," + // 1: startPosition
        "\"endPosition\" INTEGER NOT NULL ," + // 2: endPosition
        "\"progressPosition\" INTEGER NOT NULL ," + // 3: progressPosition
        "\"downloadUrl\" TEXT," + // 4: downloadUrl
        "\"threadId\" INTEGER NOT NULL );"); // 5: threadId
  }

  /** Drops the underlying database table. */
  public static void dropTable(Database db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DownloadDb\"";
    db.execSQL(sql);
  }

  @Override protected final void bindValues(DatabaseStatement stmt, DownloadEntity entity) {
    stmt.clearBindings();

    Long _Id = entity.get_Id();
    if (_Id != null) {
      stmt.bindLong(1, _Id);
    }
    stmt.bindLong(2, entity.getStartPosition());
    stmt.bindLong(3, entity.getEndPosition());
    stmt.bindLong(4, entity.getProgressPosition());

    String downloadUrl = entity.getDownloadUrl();
    if (downloadUrl != null) {
      stmt.bindString(5, downloadUrl);
    }
    stmt.bindLong(6, entity.getThreadId());
  }

  @Override protected final void bindValues(SQLiteStatement stmt, DownloadEntity entity) {
    stmt.clearBindings();

    Long _Id = entity.get_Id();
    if (_Id != null) {
      stmt.bindLong(1, _Id);
    }
    stmt.bindLong(2, entity.getStartPosition());
    stmt.bindLong(3, entity.getEndPosition());
    stmt.bindLong(4, entity.getProgressPosition());

    String downloadUrl = entity.getDownloadUrl();
    if (downloadUrl != null) {
      stmt.bindString(5, downloadUrl);
    }
    stmt.bindLong(6, entity.getThreadId());
  }

  @Override public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  @Override public DownloadEntity readEntity(Cursor cursor, int offset) {
    DownloadEntity entity = new DownloadEntity( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _Id
        cursor.getLong(offset + 1), // startPosition
        cursor.getLong(offset + 2), // endPosition
        cursor.getLong(offset + 3), // progressPosition
        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadUrl
        cursor.getInt(offset + 5) // threadId
    );
    return entity;
  }

  @Override public void readEntity(Cursor cursor, DownloadEntity entity, int offset) {
    entity.set_Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setStartPosition(cursor.getLong(offset + 1));
    entity.setEndPosition(cursor.getLong(offset + 2));
    entity.setProgressPosition(cursor.getLong(offset + 3));
    entity.setDownloadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    entity.setThreadId(cursor.getInt(offset + 5));
  }

  @Override protected final Long updateKeyAfterInsert(DownloadEntity entity, long rowId) {
    entity.set_Id(rowId);
    return rowId;
  }

  @Override public Long getKey(DownloadEntity entity) {
    if (entity != null) {
      return entity.get_Id();
    } else {
      return null;
    }
  }

  @Override public boolean hasKey(DownloadEntity entity) {
    return entity.get_Id() != null;
  }

  @Override protected final boolean isEntityUpdateable() {
    return true;
  }

  /**
   * Properties of entity DownloadEntity.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property _Id = new Property(0, Long.class, "_Id", true, "_Id");
    public final static Property StartPosition =
        new Property(1, long.class, "startPosition", false, "startPosition");
    public final static Property EndPosition =
        new Property(2, long.class, "endPosition", false, "endPosition");
    public final static Property ProgressPosition =
        new Property(3, long.class, "progressPosition", false, "progressPosition");
    public final static Property DownloadUrl =
        new Property(4, String.class, "downloadUrl", false, "downloadUrl");
    public final static Property ThreadId =
        new Property(5, int.class, "threadId", false, "threadId");
  }
}
